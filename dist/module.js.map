{"mappings":"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","sources":["src/index.ts","src/chatbotPlugin.ts","src/store/chatbotStore.ts","src/composables/useChatBot.ts","src/composables/usePending.ts"],"sourcesContent":["export { default as chatBot} from './chatbotPlugin';\r\nexport { default as useChatBot } from './composables/useChatBot';\r\nexport { default as usePending } from './composables/usePending';","import { App } from 'vue';\r\nimport { useChatbotStore } from './store/chatbotStore';\r\nimport { createPinia } from 'pinia';\r\n\r\nconst chatBotPlugin = {\r\n  install: (app: App, options: { endpoint: string }) => {\r\n\r\n    const pinia = createPinia()\r\n\r\n    const chatbotStore = useChatbotStore(pinia)\r\n\r\n    app.provide('chatbot', chatbotStore)\r\n\r\n    const store = useChatbotStore();\r\n    store.$patch({ apiEndpoint: options.endpoint });\r\n  }\r\n};\r\n\r\nexport default chatBotPlugin;","import { defineStore } from 'pinia';\r\nimport { IChatbotState, Document, Message } from '../types';\r\n\r\nexport const useChatbotStore = defineStore('chatbot', {\r\n  state: (): IChatbotState => ({\r\n    messages: [],\r\n    history: [],\r\n    isLoading: false,\r\n    isError: false,\r\n    error: null,\r\n    pendingSourceDocs: [],\r\n    pendingMessage: '',\r\n    apiEndpoint: '',\r\n  }),\r\n\r\n  actions: {\r\n    addMessage(message: Message) {\r\n      this.messages.push(message);\r\n    },\r\n\r\n    updateIncoming(payload: { error?: string; pending?: string; sourceDocs?: Document[] }) {\r\n      if (payload.error) {\r\n        this.error = payload.error;\r\n        this.isError = true;\r\n      }\r\n\r\n      if (payload.pending) {\r\n        this.pendingMessage += payload.pending;\r\n      }\r\n\r\n      if (payload.sourceDocs) {\r\n        this.pendingSourceDocs = payload.sourceDocs;\r\n      }\r\n    },\r\n\r\n    clearIncoming() {\r\n      this.pendingMessage = '';\r\n    },\r\n\r\n    finishIncoming(message: Message) {\r\n      this.history.push([\r\n        message.message,\r\n        this.pendingMessage,\r\n        this.pendingSourceDocs as Document[]\r\n      ]);\r\n\r\n      this.messages.push({\r\n        type: 'bot',\r\n        message: this.pendingMessage,\r\n        sourceDocs: this.pendingSourceDocs,\r\n      });\r\n\r\n      this.pendingMessage = '';\r\n      this.pendingSourceDocs = [];\r\n      this.isLoading = false;\r\n    },\r\n\r\n    setError(error: string) {\r\n      this.isError = true;\r\n      this.error = error;\r\n    },\r\n\r\n    clearError() {\r\n      this.isError = false;\r\n      this.error = null;\r\n    },\r\n\r\n    setLoading(isLoading: boolean) {\r\n      this.isLoading = isLoading;\r\n    },\r\n\r\n    clearMessages() {\r\n      this.messages = [];\r\n    },\r\n\r\n    setApiEndpoint(apiEndpoint: string) {\r\n      this.apiEndpoint = apiEndpoint;\r\n    },\r\n  }\r\n});","import { useChatbotStore } from '../store/chatbotStore'; // Import the Pinia store\r\nimport { ref } from 'vue';\r\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\r\n\r\nexport default function useChatBot() {\r\n  const chatbot = useChatbotStore();\r\n  const sendMessage = async (question: string) => {\r\n    chatbot.clearError();\r\n    chatbot.addMessage({\r\n      message: question,\r\n      type: 'user',\r\n    });\r\n\r\n    const apiPath = chatbot.apiEndpoint + '/chat';\r\n    try {\r\n      fetchEventSource(apiPath, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'mode': 'cors',\r\n        },\r\n        body: JSON.stringify({\r\n          question,\r\n          history: chatbot.history,\r\n        }),\r\n        onmessage: (event: any) => {\r\n          if (event.data === '[DONE]') {\r\n            return;\r\n          }\r\n          const data = JSON.parse(event.data);\r\n          chatbot.updateIncoming(data);\r\n        },\r\n        onclose: () => {\r\n          chatbot.finishIncoming({ message: question, type: 'user' });\r\n        },\r\n        onerror: (err: any) => {\r\n          chatbot.setError(err.message);\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      chatbot.setError(error.message);\r\n    }\r\n  };\r\n\r\n  const clearMessages = () => {\r\n    chatbot.clearMessages();\r\n  };\r\n\r\n  const setEndpoint = (endpoint: string) => {\r\n    chatbot.setApiEndpoint(endpoint);\r\n  };\r\n\r\n  return {\r\n    messages: ref(chatbot.messages), \r\n    isLoading: ref(chatbot.isLoading),\r\n    isError: ref(chatbot.isError),\r\n    error: ref(chatbot.error),\r\n    sendMessage,\r\n    clearMessages,\r\n    setEndpoint,\r\n  };\r\n}\r\n","import { computed } from 'vue';\r\nimport { useChatbotStore } from '../store/chatbotStore';\r\n\r\nexport default function usePending() {\r\n  const store = useChatbotStore();\r\n  \r\n  return {\r\n    pending: computed(() => store.pendingMessage)\r\n  };\r\n}"],"names":[],"version":3,"file":"module.js.map"}